name: Process Issue Open/Edit

on:
  issues:
    types:
      - labeled
#       - opened
#       - edited
#       - reopened

permissions:
  contents: read
  id-token: write
  issues: write

jobs:
  validate:
    name: Validate Request
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'Process' }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      # Parse the issue body into machine-readable JSON, so that it can be
      # processed by the rest of the workflow.
      - name: Parse Issue Body
        id: parse
        uses: issue-ops/parser@v4
        with:
          body: ${{ github.event.issue.body }}
          issue-form-template: new.yaml
          workspace: ${{ github.workspace }}

      - name: Validate Issue
        id: validate
        uses: issue-ops/validator@v3
        with:
          issue-form-template: example-request.yml
          parsed-issue-body: ${{ steps.parse.outputs.json }}
          workspace: ${{ github.workspace }}

      - name: Output Validation Results
        id: output
        run: |
          echo "Result: ${{ steps.validate.outputs.result }}"
          echo "Errors: ${{ steps.validate.outputs.errors }}"

      - if: ${{ steps.validate.outputs.result == 'success' }}
        name: Add or update trust-list
        uses: actions/github-script@v7
        with:
          script: |
            const yaml = require('js-yaml');

            // Parse the issue form data
            const formData = JSON.parse('${{ steps.parse.outputs.json }}');
            console.log("Parsed form data:", formData);

            // Generate a slug/id from the trust list name
            const id = formData.name.toLowerCase().replace(/[^\w]+/g, '-');
            const filePath = `data/${id}.yaml`;
            const branchName = `add-trust-list-${context.issue.number}`;

            // Get the default branch
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const defaultBranch = repo.default_branch;

            // Get the SHA of the latest commit on the default branch
            const { data: refData } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${defaultBranch}`
            });
            const sha = refData.object.sha;

            // Check if branch already exists
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branchName}`
              });
              
              // Branch exists, delete it
              await github.rest.git.deleteRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `heads/${branchName}`
              });
              console.log(`Deleted existing branch: ${branchName}`);
            } catch (error) {
              // Branch doesn't exist, which is fine
              console.log(`Branch ${branchName} does not exist yet`);
            }

            // Create a new branch
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: sha
            });
            console.log(`Created branch: ${branchName}`);

            // Create the PKI data structure according to model.go
            const pkiData = {
              id: id,
              name: formData.name,
              description: formData.description,
              website: formData.website,
              contact: formData.contact || "",
              ccadb: formData.ccadb && formData.ccadb.length > 0,
              "legal-context": "",
              audit: [],
              requirements: [],
              discussions: [],
              issues: [],
              "trust-lists": {
                info: "",
                policy: formData.policy || "",
                trust: []
              }
            };

            const yamlContent = yaml.dump(pkiData);
            console.log(`Generated YAML content for ${id}`);

            // Create or update the file
            try {
              // Try to get the file first to see if it exists
              const { data: fileContent } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: filePath,
                ref: branchName
              });
              
              // File exists, update it
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: filePath,
                message: `Update trust list: ${formData.name}`,
                content: Buffer.from(yamlContent).toString('base64'),
                branch: branchName,
                sha: fileContent.sha
              });

              console.log(`Updated file: ${filePath}`);

            } catch (error) {
              // File doesn't exist, create it
              await github.rest.repos.createOrUpdateFileContents({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: filePath,
                message: `Add new trust list: ${formData.name}`,
                content: Buffer.from(yamlContent).toString('base64'),
                branch: branchName
              });

              console.log(`Created file: ${filePath}`);
            }

            // Create a pull request
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Add trust list: ${formData.name}`,
              head: branchName,
              base: defaultBranch,
              body: `This PR adds the trust list "${formData.name}" as requested in issue #${context.issue.number}.

            Website: ${formData.website}
            ${formData.policy ? `Policy: ${formData.policy}` : ''}

            Original description:
            ${formData.description}

            Closes #${context.issue.number}`
            });

            console.log(`Created PR: ${pr.html_url}`);

            // Add a comment on the issue with a link to the PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `I've created a pull request to add this trust list: ${pr.html_url}`
            });

            console.log(`Added comment to issue #${context.issue.number}`);
