name: Process Issue Open/Edit

on:
  issues:
    types:
      - labeled
#       - opened
#       - edited
#       - reopened

permissions:
  contents: write 
  id-token: write
  issues: write
  pull-requests: write

jobs:
  process:
    name: Process Issue
    runs-on: ubuntu-latest
    if: ${{ github.event.label.name == 'Process' }}

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4

      # Parse the issue body into machine-readable JSON, so that it can be
      # processed by the rest of the workflow.
      - name: Parse Issue Body
        id: parse
        uses: issue-ops/parser@v4
        with:
          body: ${{ github.event.issue.body }}
          issue-form-template: new.yaml
          workspace: ${{ github.workspace }}

      - name: Validate Issue
        id: validate
        uses: issue-ops/validator@v3
        with:
          issue-form-template: new.yaml
          parsed-issue-body: ${{ steps.parse.outputs.json }}
          workspace: ${{ github.workspace }}

      - name: Output Validation Results
        id: output
        run: |
          echo "Result: ${{ steps.validate.outputs.result }}"
          echo "Errors: ${{ steps.validate.outputs.errors }}"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
    
      - name: Install Dependencies
        run: npm install js-yaml pretty-data

      - if: ${{ steps.validate.outputs.result == 'success' }}
        name: Add or update trust-list
        uses: actions/github-script@v7
        env:
          ISSUE_DATA: ${{ steps.parse.outputs.json }}
        with:
          github-token: ${{ github.token }}
          script: |
            const yaml = require('js-yaml');

            // Parse the issue form data using environment variable
            const formData = JSON.parse(process.env.ISSUE_DATA);
            console.log("Parsed form data:", formData);

            // Generate a slug/id from the trust list name
            const id = formData.name.toLowerCase().replace(/[^\w]+/g, '-');
            const filePath = `data/${id}.yaml`;
            const branchName = `add-trust-list-${context.issue.number}`;

            // Get the default branch
            const { data: repo } = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            });
            const defaultBranch = repo.default_branch;

            // Check if the file exists in the default branch
            let fileExists = false;
            let existingData = null;
            
            try {
              const { data: fileData } = await github.rest.repos.getContent({
                owner: context.repo.owner,
                repo: context.repo.repo,
                path: filePath,
                ref: defaultBranch
              });
              
              fileExists = true;
              const content = Buffer.from(fileData.content, 'base64').toString('utf8');
              existingData = yaml.load(content);
              console.log(`File ${filePath} exists in the repository.`);
            } catch (error) {
              console.log(`File ${filePath} does not exist yet.`);
            }

            // Get the SHA of the latest commit on the default branch
            const { data: refData } = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${defaultBranch}`
            });
            const sha = refData.object.sha;

            // Create a new branch
            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/heads/${branchName}`,
              sha: sha
            });
            console.log(`Created branch: ${branchName}`);
              
            // Create or update the PKI data structure
            let pkiData;
            
            if (fileExists && existingData) {
              // Merge the new data with existing data
              pkiData = {
                ...existingData,
                name: formData.name,
                description: formData.description,
                website: formData.website
              };
              
              // Update optional fields only if provided in the form
              if (formData.contact) pkiData.contact = formData.contact;
              if (formData.ccadb && formData.ccadb.selected && formData.ccadb.selected.length > 0) {
                pkiData.ccadb = true;
              }
              
              // Update policy if provided
              if (formData.policy) {
                pkiData["trust-lists"].policy = formData.policy;
              }
            } else {
              // Create new data structure according to model.go
              pkiData = {
                name: formData.name,
                description: formData.description,
                website: formData.website,
                contact: formData.contact || "",
                ccadb: formData.ccadb && formData.ccadb.selected && formData.ccadb.selected.length > 0,
                "legal-context": "",
                audit: [], // Array of Audit objects
                requirements: [], // Array of Source objects
                discussions: [], // Array of Source objects 
                issues: [], // Array of Source objects
                "trust-lists": {
                  info: "",
                  policy: formData.policy || "",
                  trust: [
                    {
                      purposes: [], // Array of strings
                      requirements: [], // Array of Source objects
                      discussions: [], // Array of Source objects
                      issues: [], // Array of Source objects
                      audit: [], // Array of Audit objects
                      list: [] // Array of Source objects
                    }
                  ]
                }
              };
            }

            // Add comments to the YAML file
            const addComments = (obj) => {
              const comments = {
                basic_info: '# Basic Trust List Information',
                verification: '\n# Verification and Audit Information',
                community: '\n# Community References',
                trust_lists: '\n# Trust List Details'
              };

              const result = {};
              for (const [key, value] of Object.entries(obj)) {
                if (comments[key]) {
                  result[comments[key]] = null; // Insert comment as a key with null value
                }
                result[key] = value;
              }
              return result;
            };

            // Format the YAML with comments and proper spacing
            const yamlContent = yaml.dump(addComments(pkiData), {
              lineWidth: -1,  // Don't wrap lines
              noRefs: true,   // Don't use aliases
              quotingType: '"',
              forceQuotes: false,
              sortKeys: false // Preserve key order
            });
            
            // Create or update file in the branch
            const commitMessage = fileExists 
              ? `Update trust list: ${formData.name}` 
              : `Add new trust list: ${formData.name}`;
              
            await github.rest.repos.createOrUpdateFileContents({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: filePath,
              message: commitMessage,
              content: Buffer.from(yamlContent).toString('base64'),
              branch: branchName
            });
            
            // Create a pull request
            const prTitle = fileExists 
              ? `Update trust list: ${formData.name}` 
              : `Add trust list: ${formData.name}`;
              
            const { data: pr } = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              head: branchName,
              base: defaultBranch,
              body: `This PR ${fileExists ? 'updates' : 'adds'} the trust list "${formData.name}" as requested in issue #${context.issue.number}.

            Website: ${formData.website}
            ${formData.policy ? `Policy: ${formData.policy}` : ''}

            Original description:
            ${formData.description}

            Closes #${context.issue.number}`
            });
            
            // Add a comment on the issue with a link to the PR
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: `I've created a pull request to ${fileExists ? 'update' : 'add'} this trust list: ${pr.html_url}`
            });
